name: 3. Publish Public Api Docker Image to ECR

on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACE: nagp
  ECR_REPOSITORY: nagp-k8s-devops-assessment/ecommerce-public-api

jobs:
  build:

    runs-on: ubuntu-latest
    environment: 
      name: Production
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    
    - name: Create tag artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{github.ref_name}}
        path: Release
    
    - name: Set env
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1   
          
    - name: Build, tag, and push image to Amazon ECR
      working-directory: ./ecommerce-public-api
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}         
        IMAGE_TAG: ${{ github.ref_name }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY
